@startuml
actor "Client" as client
participant "PGO" as pgo
participant "Module Provider" as module
boundary "Auth Service" as auth
control "Idp (DVA)" as idp
participant "FHIR service" as fhir_service

== start module ==
pgo -> client: "302 /authorize"
client -> idp: GET /authorize
idp -> idp: login
note left 
   An active session cookie on 
   the SSO endpoint could be used 
   to achieve Single Sign On (SSO)
end note
idp -> client: 302 auth/callback?code=x
client -> pgo: GET auth/callback?code=x
pgo -> idp: POST idp/token (code, client auth)
idp --> pgo: id_token, access_token
pgo -> fhir_service: GET /fhir/ActivityDefinition
fhir_service --> pgo
pgo -> client: show activity definition(s)
client -> pgo: select activity definition (ActivityDefinition)
pgo -> fhir_service: POST /fhir/Task (instantiates=ActivityDefinition)
fhir_service --> pgo: Task

== launch ==
pgo -> pgo: Create HTI token (Patient, Task, ActivityDefinition)
pgo -> module: launch (HTI token)
group SMART on FHIR
module -> client: "302 /authorize?launch=<HTI token>"
client -> auth: GET /authorize?launch=<HTI token>"
group OpenID Connect
auth -> client: "302 /authorize"
client -> idp: GET /authorize
idp -> idp: login or validate\nsso credentials 
note left 
   An active session cookie on 
   the SSO endpoint could be used 
   to achieve Single Sign On (SSO)
end note
idp -> client: 302 auth/callback?code=y
client -> auth: GET auth/callback?code=y
auth -> idp: POST idp/token (code, client auth)
idp --> auth: id_token, access_token
end
auth -> auth: validate user with HTI context
auth -> client: 302 module/callback?code=z
client -> module: GET module/callback?code=z
module -> auth: POST /token (code, client auth)
auth --> module: id_token, access_token
end

== update resources ==

module -> fhir_service: GET /fhir/Task/1234 (access_token)
fhir_service --> module: FHIR task

== views tasks ==
pgo -> client: "302 /authorize"
client -> idp: GET /authorize
idp -> idp: login or validate\n sso credentials
note left 
   An active session cookie on 
   the SSO endpoint could be used 
   to achieve Single Sign On (SSO)
end note
idp -> client: 302 auth/callback?code=x
client -> pgo: GET auth/callback?code=x
pgo -> idp: POST idp/token (code, client auth)
idp --> pgo: id_token, access_token
pgo -> fhir_service: GET /fhir/Task
fhir_service --> pgo: Task(s)
pgo -> client: show task(s)

@enduml
